
[DEFAULT]
# Hostname of ZeroMQ Publisher
hostname: localhost
# Port of ZeroMQ Publisher
port: 8091
# Protocol of ZeroMQ Publisher
protocol: tcp
# Filter for published measurements (empty or not defined = no filter)
filter:


# Attribute where the status can be found
# Attributes are general identifiers in InfluxDB measurements
# A measurement looks like <name>,<tag1>=<val1>,... <field1>=<fval1> <timestamp>
# So the attribute tags.tag1 is resolved to val1
status_attr: fields.stat
# At this state, the dashboards are updated (start function is called)
create_at_status: start
# At this state the end time of the dashboards is updated (stop function is called)
delete_at_status: finish
# At this interval, the update function is called.
# ALL intervals can be given in seconds or like 2h, 34m or 4d
update_inverval: 30m

[Grafana]
# Hostname of Grafana
hostname: heidi
# Post number of Grafana
port: 3000
# Username for this script. It must be exist already and must have admin role
username: scriptuser
# Password for the script user. Please set appropriate permissions
password: scriptpass


[UserView]
# Create dashboards for the jobs in the related users account
# A user account can be seen as a username plus organization
# because each user gets an own organization
# Inside an organization exists a datasource to the user data
do_userview: True
# Each time a dashboard is created, the existance of the user is
# checked. If the username is not registered yet, it can be automatically
# created. The username is set in grafana_user option and can
# contain attribute variables
# Should non-existing users be created with grafana_user and
# grafana_def_pass settings?
create_users: True
# You can use attribute specifiers in [] for substitution
# for many settings that require data from the actual measurement
grafana_user: [tags.username]
grafana_def_pass: [tags.username]_2017
# Role of the user in his/her organization. Should be Viewer or
# Editor
create_user_role: Viewer
# Create the organization for the user if it does not exist. The
# organization name can be defined with the grafana_org option 
create_user_orgs: True
grafana_org: [tags.username]
# Create the datasource for the user in the organization
# It checks all hosts in Databases->user_dbs and searches for
# the database named Databases->user_dbs->dbname
create_user_ds: True
grafana_datasource : [tags.username]
# Name of the dashboard. Example fields.jobname ([tags.jobid])
dashboard_name: [tags.jobid]
# Path to the dashboard template JSON files
templates: ./templates/[fields.march]
# Add only template JSONs where all metrics exist in the database
# Currently not implemented!
check_metrics: True
# Check for a file usermetrics.json in templates directory
usermetrics: True
# Check for a file userevents.json in templates directory
userevents: True
# Delete dashboards after this interval
delete_interval: 1m
# Delete dashboards only when not starred (User can keep the dashboards
# this way)
delete_only_unstarred: True

[Database-fepa]
# Hostname of the database
hostname: fepa
# Port of the database
port: 8086
# Username for the database
username: admin
# Password for the database user
password: admin
# Name of the database
dbname: tinygpu
